{"version":3,"sources":["app/hooks.ts","features/todolist/todoListSlice.ts","components/todoForm/styled.tsx","components/todoForm/TodoForm.tsx","components/todoToolbar/styled.tsx","components/horizontalNav/styled.tsx","components/horizontalNav/horizontalNav.tsx","components/horizontalNav/horizontalNavItem.tsx","components/pill/styled.tsx","components/pill/index.tsx","components/todoToolbar/TodoToolbar.tsx","features/todolist/styled.tsx","features/todolist/TodoItem.tsx","features/todolist/TodoList.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","todoListSlice","createSlice","name","initialState","todoFilter","todos","id","text","completed","reducers","createTodo","reducer","state","action","push","payload","prepare","nanoid","completeTodo","index","findIndex","todo","deleteTodo","splice","updateTodoFilter","actions","selectTodos","todoList","selectTodoFilter","StyledForm","styled","form","StyledFormInput","input","StyledFormButton","button","TodoForm","dispatch","useState","setText","onSubmit","e","preventDefault","handleFormSubmission","placeholder","onChange","target","value","StyledToolbar","div","StyledTodoCount","StyledHorizontalNav","ul","StyledHorizontalNavItem","li","HorizontalNav","children","HorizontalNavItem","StyledPill","StyledPillActive","Pill","active","onClick","TodoToolbar","todoCount","length","todoCountText","handleFilterUpdate","filter","StyledTaskList","StyledTaskDelete","StyledTaskStatus","StyledTaskItem","StyledTaskTitle","label","StyledTaskItemCompleted","TodoItem","type","aria-label","TodoList","map","StyledHeading","h1","StyledSubHeading","App","date","Date","className","toDateString","store","configureStore","todoListReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.874a2212.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction, nanoid } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport type TodoFilterType = 'All' | 'Active' | 'Completed';\nexport interface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nexport interface TodoListState {\n  todoFilter: TodoFilterType;\n  todos: Array<Todo>;\n}\n\nconst initialState: TodoListState = {\n  todoFilter: 'All',\n  todos: [\n    {\n      id: '4d90c13d-54d2-44a9-a474-054a725ad2b6',\n      text: 'Do the laundry',\n      completed: true,\n    },\n  ]\n};\n\nexport const todoListSlice = createSlice({\n  name: 'todoList',\n  initialState,\n  reducers: {\n    createTodo: {\n      reducer: (state, action: PayloadAction<Todo>) => {\n        state.todos.push(action.payload)\n      },\n      prepare: (text: string) => ({\n        payload: {\n          id: nanoid(),\n          text,\n          completed: false,\n        } as Todo,\n      })\n    },\n    completeTodo: (state, action: PayloadAction<string>) => {\n      const index = state.todos.findIndex((todo) => todo.id === action.payload);\n      state.todos[index].completed = !state.todos[index].completed;\n    },\n    deleteTodo: (state, action: PayloadAction<string>) => {\n      const index = state.todos.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(index, 1);\n    },\n    updateTodoFilter: (state, action: PayloadAction<TodoFilterType>) => {\n      state.todoFilter = action.payload;\n    },\n  },\n});\n\nexport const { createTodo, completeTodo, deleteTodo, updateTodoFilter } = todoListSlice.actions;\n\nexport const selectTodos = (state: RootState) => {\n  return [...state.todoList.todos];\n};\n\nexport const selectTodoFilter = (state: RootState) => {\n  return state.todoList.todoFilter;\n}\n\nexport default todoListSlice.reducer;\n","import styled from 'styled-components';\n\nconst StyledForm = styled.form`\n  display: flex;\n  margin-top: 10px;\n`;\n\nconst StyledFormInput = styled.input`\n  flex: 1;\n  font-size: 16px;\n  font-family: var(--font);\n  padding: 10px 20px;\n  border: 0;\n  box-shadow: 0 -1px 0 #e2e4ea inset;\n  color: #455963;\n\n  &:focus {\n    box-shadow: 0 -1px 0 #bdcdd6 inset;\n  }\n`;\n\nconst StyledFormButton = styled.button`\n  display: none;\n`;\n\n\nexport {\n  StyledForm,\n  StyledFormInput,\n  StyledFormButton,\n}\n","import React, { useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport {\n  createTodo,\n} from '../../features/todolist/todoListSlice';\n\nimport {\n  StyledForm,\n  StyledFormInput,\n  StyledFormButton,\n} from './styled';\n\nconst TodoForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [text, setText] = useState<string>(\"\");\n\n  const handleFormSubmission = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    dispatch(createTodo(text));\n\n    setText('');\n  }\n\n  return (\n    <StyledForm onSubmit={(e) => handleFormSubmission(e)}>\n      <StyledFormInput placeholder=\"Add a new task...\" onChange={(e: React.ChangeEvent<HTMLInputElement>): void => setText(e.target.value)} value={text} />\n      <StyledFormButton>Add Task</StyledFormButton>\n    </StyledForm>\n  );\n};\n\nexport default TodoForm;\n","import styled from 'styled-components';\n\nconst StyledToolbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  padding: 0 20px;\n`;\n\nconst StyledTodoCount = styled.div`\n  color: #8a9ca5;\n  font-size: 14px;\n`;\n\nexport {\n  StyledToolbar,\n  StyledTodoCount,\n}\n","import styled from 'styled-components';\n\nconst StyledHorizontalNav = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content:space-around;\n  list-style-type:none;\n`;\n\nconst StyledHorizontalNavItem = styled.li``;\n\nexport {\n  StyledHorizontalNav,\n  StyledHorizontalNavItem,\n};\n","import React from 'react';\nimport { StyledHorizontalNav } from './styled';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst HorizontalNav: React.FC<Props> = ({\n  children,\n}) => {\n  return (\n    <StyledHorizontalNav>\n      {children}\n    </StyledHorizontalNav>\n  )\n}\n\nexport default HorizontalNav;\n","import React from 'react';\nimport {\n  StyledHorizontalNavItem,\n} from './styled';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst HorizontalNavItem: React.FC<Props> = ({\n  children,\n}) => {\n  return (\n    <StyledHorizontalNavItem>\n      {children}\n    </StyledHorizontalNavItem>\n  )\n}\n\nexport default HorizontalNavItem;\n","import styled from 'styled-components';\n\nconst StyledPill = styled.button`\n  border: 0;\n  padding: 4px 10px;\n  background: 0;\n  font-size: 14px;\n  line-height: 1;\n  cursor: pointer;\n  font-family: var(--font);\n  color: #8a9ca5;\n  border-radius: 20px;\n\n  &:focus,\n  &:hover {\n    color: #546066;\n    transition: color 0.2s ease;\n    text-decoration: underline;\n  }\n`;\n\nconst StyledPillActive = styled(StyledPill)`\n  background-color: #7996a5;\n  color: #fff;\n\n  &:focus,\n  &:hover {\n    background-color: #546066;\n    color: #fff;\n    transition: background-color 0.2s ease;\n    text-decoration: underline;\n  }\n`;\n\nexport {\n  StyledPill,\n  StyledPillActive\n}\n","import React from 'react';\nimport { StyledPill, StyledPillActive } from './styled';\n\ninterface Props {\n  text: String;\n  active?: Boolean;\n  onClick: (evt: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Pill: React.FC<Props> = ({\n  text,\n  active = false,\n  onClick,\n}) => {\n\n  return active ?\n    (\n      <StyledPillActive onClick={onClick}>\n        {text}\n      </StyledPillActive>\n    ) :\n    (\n      <StyledPill onClick={onClick}>\n        {text}\n      </StyledPill>\n    );\n}\n\nexport default Pill;\n","import React from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { TodoFilterType, updateTodoFilter, selectTodos, selectTodoFilter } from '../../features/todolist/todoListSlice';\nimport { StyledToolbar, StyledTodoCount } from './styled';\nimport { HorizontalNav, HorizontalNavItem } from '../horizontalNav';\nimport Pill from '../pill';\n\nconst TodoToolbar: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todoCount = useAppSelector(selectTodos).length;\n  const todoFilter = useAppSelector(selectTodoFilter);\n  const todoCountText = todoCount === 1 ? `${todoCount} task` : `${todoCount} tasks`;\n\n  const handleFilterUpdate = (filter: TodoFilterType) => {\n    dispatch(updateTodoFilter(filter));\n  }\n\n  return (\n    <StyledToolbar>\n      <StyledTodoCount>{todoCountText}</StyledTodoCount>\n      <HorizontalNav>\n        <HorizontalNavItem>\n          <Pill text=\"All\" active={todoFilter === 'All'} onClick={() => handleFilterUpdate('All')} />\n        </HorizontalNavItem>\n        <HorizontalNavItem>\n          <Pill text=\"Active\" active={todoFilter === 'Active'} onClick={() => handleFilterUpdate('Active')} />\n        </HorizontalNavItem>\n        <HorizontalNavItem>\n          <Pill text=\"Completed\" active={todoFilter === 'Completed'} onClick={() => handleFilterUpdate('Completed')} />\n        </HorizontalNavItem>\n      </HorizontalNav>\n    </StyledToolbar>\n  );\n};\n\nexport default TodoToolbar;\n","import styled from 'styled-components';\n\nconst StyledTaskList = styled.div`\n  max-height: 60vh;\n  overflow: auto;\n`;\n\nconst StyledTaskDelete = styled.button`\n  border: 0;\n  width: 18px;\n  height: 18px;\n  padding: 0;\n  overflow: hidden;\n  background-color: transparent;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg fill='%23dc4771' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 174.239 174.239'%3e%3cpath d='M87.12 0C39.082 0 0 39.082 0 87.12s39.082 87.12 87.12 87.12 87.12-39.082 87.12-87.12S135.157 0 87.12 0zm0 159.305c-39.802 0-72.185-32.383-72.185-72.185S47.318 14.935 87.12 14.935s72.185 32.383 72.185 72.185-32.384 72.185-72.185 72.185z'/%3e%3cpath d='M120.83 53.414c-2.917-2.917-7.647-2.917-10.559 0L87.12 76.568 63.969 53.414c-2.917-2.917-7.642-2.917-10.559 0s-2.917 7.642 0 10.559l23.151 23.153-23.152 23.154a7.464 7.464 0 000 10.559 7.445 7.445 0 005.28 2.188 7.437 7.437 0 005.28-2.188L87.12 97.686l23.151 23.153a7.445 7.445 0 005.28 2.188 7.442 7.442 0 005.28-2.188 7.464 7.464 0 000-10.559L97.679 87.127l23.151-23.153a7.465 7.465 0 000-10.56z'/%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  cursor: pointer;\n  display: none;\n`;\n\nconst StyledTaskStatus = styled.input`\n  appearance: none;\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  border: 2px solid #bbbdc7;\n  border-radius: 50%;\n  background-color: #fff;\n  margin-right: 10px;\n  position: relative;\n\n  &:checked {\n    background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='405.272' height='405.272'%3e%3cpath d='M393.401 124.425L179.603 338.208c-15.832 15.835-41.514 15.835-57.361 0L11.878 227.836c-15.838-15.835-15.838-41.52 0-57.358 15.841-15.841 41.521-15.841 57.355-.006l81.698 81.699L336.037 67.064c15.841-15.841 41.523-15.829 57.358 0 15.835 15.838 15.835 41.514.006 57.361z' fill='%23fff'/%3e%3c/svg%3e\");\n    background-size: 10px;\n    background-color: #4acea3;\n    border-color: #38bb90;\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n`;\n\nconst StyledTaskItem = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 12px 20px;\n\n  &:not(:last-of-type) {\n    border-bottom: 1px solid #eef0f5;\n  }\n\n  &:hover {\n    background-color: #f6fbff;\n\n    & > ${StyledTaskDelete} {\n      display: block;\n    }\n  }\n`;\n\nconst StyledTaskTitle = styled.label`\n  margin-right: auto;\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledTaskItemCompleted = styled(StyledTaskItem)`\n  background-color: rgba(74, 206, 163, 0.1);\n\n  & > ${StyledTaskTitle} {\n    text-decoration: line-through wavy rgba(0,0,0,.3);\n  }\n`;\n\n\nexport {\n  StyledTaskDelete,\n  StyledTaskList,\n  StyledTaskStatus,\n  StyledTaskItem,\n  StyledTaskTitle,\n  StyledTaskItemCompleted,\n}\n","import React from 'react';\n\nimport { useAppDispatch } from '../../app/hooks';\nimport { deleteTodo, completeTodo } from './todoListSlice';\n\nimport {\n  StyledTaskStatus,\n  StyledTaskItem,\n  StyledTaskTitle,\n  StyledTaskDelete,\n  StyledTaskItemCompleted,\n} from './styled';\n\ninterface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nconst TodoItem: React.FC<Todo> = ({\n  id,\n  text,\n  completed\n}) => {\n  const dispatch = useAppDispatch();\n\n  if (completed) {\n    return (\n      <StyledTaskItemCompleted>\n        <StyledTaskStatus type=\"checkbox\" onChange={() => dispatch(completeTodo(id))}/>\n        <StyledTaskTitle>{text}</StyledTaskTitle>\n        <StyledTaskDelete onClick={() => dispatch(deleteTodo(id))} aria-label=\"Delete task\"></StyledTaskDelete>\n      </StyledTaskItemCompleted>\n    )\n  }\n\n  return (\n    <StyledTaskItem key={id}>\n      <StyledTaskStatus type=\"checkbox\" onChange={() => dispatch(completeTodo(id))}/>\n      <StyledTaskTitle>{text}</StyledTaskTitle>\n      <StyledTaskDelete onClick={() => dispatch(deleteTodo(id))} aria-label=\"Delete task\"></StyledTaskDelete>\n    </StyledTaskItem>\n  )\n}\n\nexport default TodoItem;\n","import React from 'react';\n\nimport { useAppSelector } from '../../app/hooks';\nimport { selectTodos } from './todoListSlice';\n\nimport TodoForm from '../../components/todoForm/TodoForm';\nimport TodoToolbar from '../../components/todoToolbar/TodoToolbar';\nimport TodoItem from './TodoItem';\n\nimport {\n  StyledTaskList,\n} from './styled';\n\nconst TodoList: React.FC = () => {\n  const todos = useAppSelector(selectTodos);\n\n  return (\n    <>\n      <TodoToolbar />\n      <TodoForm />\n\n      <StyledTaskList>\n        {todos.map(todo =>\n          <TodoItem key={todo.id} id={todo.id} text={todo.text} completed={todo.completed} />\n        )}\n      </StyledTaskList>\n    </>\n  )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './features/todolist/TodoList';\nimport styled from 'styled-components';\n\nconst StyledHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n  font-weight: 600;\n  padding: 20px 10px 0px 20px;\n`;\n\nconst StyledSubHeading = styled.h1`\n  margin: 0;\n  font-size: 16px;\n  color: #8a9ca5;\n  padding: 10px 20px 20px 20px;\n`;\n\nfunction App() {\n  let date = new Date();\n\n  return (\n    <div className=\"App\">\n      <StyledHeading>Todo List</StyledHeading>\n      <StyledSubHeading>{date.toDateString()}</StyledSubHeading>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport todoListReducer from '../features/todolist/todoListSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todoList: todoListReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}